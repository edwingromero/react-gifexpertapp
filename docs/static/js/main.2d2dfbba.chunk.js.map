{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAgB9C,OACE,sBAAMC,SATkB,SAACC,GACzBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAoBO,OACtCN,EAAc,CAAC,OAKjB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAjBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCTdG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEfC,EAFe,0FAE2EC,UAAUH,GAFrF,sBAGFI,MAAMF,GAHJ,cAGfG,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAK,SAACC,GAAS,IAAD,EAC9B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAcdM,GAdc,4CAAH,sDCEPO,EAAc,SAAC,GAAiB,IAAhBb,EAAe,EAAfA,IAAIU,EAAW,EAAXA,MAC/B,OACE,sBAAKI,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAMgB,IAAKN,IACrB,4BAAIA,QCDGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EAChBd,mBAAS,CACjCqB,KAAK,GACLa,SAAS,IAH+B,mBACnCC,EADmC,KAC5BC,EAD4B,KAoB1C,OAbAC,qBAAW,WAETxB,EAASC,GACRwB,MAAM,SAAAC,GAEHH,EAAS,CACPf,KAAKkB,EACLL,SAAQ,SAId,CAACpB,IAEIqB,EDhBmBK,CAAa1B,GAA/BO,EAF+B,EAE/BA,KAAMa,EAFyB,EAEzBA,QAGd,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAClDoB,GAAS,WACT,qBAAKJ,UAAU,YAAf,SAEAT,EAAKE,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAAiCA,GAAbA,EAAIC,aEZrBgB,EAAe,WAAO,IAAD,EAEIzC,mBAAS,CAAC,gBAFd,mBAEzB0C,EAFyB,KAEb3C,EAFa,KAMhC,OACE,qCACE,6CACA,uBACA,cAAC,EAAD,CAAaA,cAAgBA,IAE3B2C,EAAWnB,KAAK,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAA2BA,SAAWA,GAAtBA,U,MCX1B6B,IAASC,OAAO,cAAC,EAAD,IAAiBC,SAASC,eAAe,W","file":"static/js/main.2d2dfbba.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n  const [inputValue, setInputValue] = useState('')\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value)\r\n  }\r\n\r\n  const handleInputSubmit = (e) => {\r\n    e.preventDefault();\r\n    if(inputValue.trim().length > 2){\r\n      setCategories(cats =>  [inputValue,...cats] ) ;\r\n      setInputValue([''])\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleInputSubmit}>\r\n      <input \r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async(category) =>{\r\n\r\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=p3z5Q0TaoEao3NsNaTTyW1BwwhgCKMfU&q=${ encodeURI(category) }&limit=10`\r\n  const resp = await fetch(url)\r\n  const { data } = await resp.json()\r\n\r\n  const gifs = data.map( (img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    }\r\n  } )\r\n  \r\n  return gifs; \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({url,title}) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url}  alt={title}/>\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n  const { data, loading } = useFetchGifs(category);\r\n\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n      { loading&&'cargando' }\r\n      { <div className=\"card-grid\">\r\n        {\r\n        data.map( (img) => (\r\n          <GifGridItem  key={ img.id } {...img} />\r\n          ))\r\n        }\r\n      </div> }\r\n    </>\r\n  )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n  const [state, setstate] = useState({\r\n    data:[],\r\n    loading: true\r\n  });\r\n\r\n\r\n  useEffect( () => {\r\n\r\n    getGifs( category )\r\n    .then( imgs => {\r\n\r\n        setstate({\r\n          data:imgs,\r\n          loading:false\r\n        })\r\n\r\n    })\r\n  },[category])\r\n\r\n  return state;\r\n}","import React,{useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState(['Dragon Ball'])\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <h2>GIFT EXPERT</h2>\r\n      <hr/>\r\n      <AddCategory setCategories={ setCategories } />\r\n      {\r\n        categories.map( category => (\r\n          <GifGrid  key={ category } category={ category } />\r\n        ))\r\n      }\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(<GifExpertApp />,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}